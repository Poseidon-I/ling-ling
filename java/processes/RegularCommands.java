package processes;

import admin.SetPrefix;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import regular.*;

import java.io.File;
import java.util.Objects;

public class RegularCommands {
	public RegularCommands(MessageReceivedEvent e, String[] message, boolean isDev) {
		boolean isAdmin = Objects.requireNonNull(e.getMember()).getPermissions().contains(Permission.ADMINISTRATOR);
		try {
			switch(message[0]) {
				case "help" -> new Help(e);
				case "faq" -> new FAQ(e);
				case "website" -> e.getMessage().reply("Check out the website at <https://linglingdev.weebly.com/>").mentionRepliedUser(false).queue();
				case "support" -> e.getMessage().reply("Join the support server at discord.gg/gNfPwa8").mentionRepliedUser(false).queue();
				case "guide" -> e.getMessage().reply("The Beginner Guide can be found at <https://linglingdev.weebly.com/beginners-guide.html>, written by `bubblepotatochips#0498`").mentionRepliedUser(false).queue();
				case "kill" -> new Kill(e);
				case "joke" -> new Joke(e);
				case "poll" -> new Poll(e);
				case "emojify" -> new Emojify(e);
				case "invite" -> e.getMessage().reply("You can add the bot to your server using the below link:\n<https://discord.com/api/oauth2/authorize?client_id=733409243222507670&permissions=67398720&scope=bot>\n\nWant the leveling bot?  Use this link: <https://discord.com/api/oauth2/authorize?client_id=846098752191332373&permissions=268454912&scope=bot>").mentionRepliedUser(false).queue();
				case "vote", "v" -> e.getMessage().reply("You can vote for the bot here: <https://top.gg/bot/733409243222507670/vote>").mentionRepliedUser(false).queue();
				case "staff" -> e.getMessage().reply("""
						```fix
						███████╗████████╗ █████╗ ███████╗███████╗
						██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔════╝
						███████╗   ██║   ███████║█████╗  █████╗
						╚════██║   ██║   ██╔══██║██╔══╝  ██╔══╝
						███████║   ██║   ██║  ██║██║     ██║
						╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝     ╚═╝
						```
						**Developer**: `Stradivarius Violin#6156`
						**Bot Admins**: `JMusical#5262` `jacqueline#1343`
						**Bot Mods**: `Penguin Irina#6514` `akc0303#5743`
						""").mentionRepliedUser(false).queue();
				case "rules" -> e.getMessage().reply("""
						```fix
						██████╗  ██████╗ ████████╗    ██████╗ ██╗   ██╗██╗     ███████╗███████╗
						██╔══██╗██╔═══██╗╚══██╔══╝    ██╔══██╗██║   ██║██║     ██╔════╝██╔════╝
						██████╔╝██║   ██║   ██║       ██████╔╝██║   ██║██║     █████╗  ███████╗
						██╔══██╗██║   ██║   ██║       ██╔══██╗██║   ██║██║     ██╔══╝  ╚════██║
						██████╔╝╚██████╔╝   ██║       ██║  ██║╚██████╔╝███████╗███████╗███████║
						╚═════╝  ╚═════╝    ╚═╝       ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚══════╝
						```
						1. Do not spam commands, excessively ping users, or send messages to trigger luthier or take any sort of action that may cause the bot to crash.
						2. Do not abuse bugs or exploits.  If a bug/exploit is found, **IMMEDIATELY** report it to `Stradivarius Violin#6156`.
						3. Do not overexcessively or inappropriately use `!checkdm` or `!kill`.  These were written to poke fun at others, not to annoy/hurt them.
						4. Do not ask mods/admins/devs for information that can easily be found by reading the patch notes, using `!help`, or using `!faq`.
						5. **All bot mods/admins reserve the right to punish users when breaking bot rules is involved.**  Attempting to stop bot mods/admins from using bot moderation commands will result in your punishment as well.
											
						**Privacy Notice** - Ling Ling **does not store any data** except for data explicitly related to the economy system, which are variables all generated by the bot itself, with the exception of IDs provided by Discord (eg. Server ID for Luthier & Prefixes, User ID for saves), which are necessary to allow the bot to distinguish between different users and servers.
											
						tl;dr: ling ling doesn't store any data except your discord user id and stuff it makes by itself so that it works properly
						""").mentionRepliedUser(false).queue();
				
				case "checkdm" -> {
					String id = message[1];
					try {
						User send = e.getJDA().getUserById(id);
						assert send != null;
						send.openPrivateChannel().queue((channel) -> channel.sendMessage("**OI <@" + id + ">, " + e.getAuthor().getName() + " WANTS YOU TO CHECK YOUR DMS.  DO IT NOW OR ELSE.**").queue());
						e.getChannel().deleteMessageById(e.getMessage().getId()).queue();
						e.getChannel().sendMessage("**OI <@" + id + ">, " + e.getAuthor().getName() + " WANTS YOU TO CHECK YOUR DMS.  DO IT NOW OR ELSE.**").queue();
					} catch(Exception exception) {
						e.getMessage().reply("Either the recipient was being a n00b and didn't have their DMs open or you are dumb and didn't provide a valid User ID.").mentionRepliedUser(false).queue();
					}
				}
				case "prefix" -> {
					if(message.length > 1) {
						if(isAdmin || isDev) {
							new SetPrefix(e);
						} else {
							e.getMessage().reply(":no_entry: **403 FORBIDDEN** :no_entry:\nYou do not have permission to run this command.").mentionRepliedUser(false).queue();
						}
					}
				}
				case "botstats" -> {
					int serverCount = e.getJDA().getSelfUser().getMutualGuilds().size();
					File[] files = new File("Ling Ling Bot Data\\Economy Data").listFiles();
					assert files != null;
					e.getMessage().reply("Servers: " + serverCount + "\nUsers: " + files.length).mentionRepliedUser(false).queue();
				}
				case "settings" -> {
					new UserSettings(e);
				}
				default -> new Economy(e, message);
			}
		} catch(Exception exception) {
			//nothing here lol
		}
	}
}